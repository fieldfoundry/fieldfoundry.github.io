<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jamstack on</title><link>/tags/jamstack/</link><description>Recent content in Jamstack on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 11 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/jamstack/index.xml" rel="self" type="application/rss+xml"/><item><title>This theme has a perfect Google Lighthouse&amp;nbsp;score</title><link>/blog/this-theme-has-a-perfect-google-lighthousenbspscore/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>/blog/this-theme-has-a-perfect-google-lighthousenbspscore/</guid><description>&lt;p>This theme has a (near) &lt;a href="https://pagespeed.web.dev/analysis/https-www-hugobricks-preview-usecue-com/je4uqrt6nj?form_factor=mobile" target="_blank" rel="noopener">perfect Google Lighthouse score&lt;/a>. Some people like fast cars. I like fast websites. But how to get to a perfect Google Lighthouse score? Let me explain.&lt;/p>
&lt;p>You might feel that it is nearly impossible to get to a perfect 100% score. You minified your Javascript, properly scaled your images and even combined some requests, but that did not help nearly enough. The problem is: you might be looking at it from the wrong angle. I build 100% scoring websites on a daily basis, so obviously it is very well possible to get a perfect score on all your websites with little effort. I will try to explain what we want to achieve and how we can achieve that.&lt;/p></description></item><item><title>Jamstack has matured</title><link>/blog/jamstack-has-matured/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>/blog/jamstack-has-matured/</guid><description>&lt;p>In the beginning Jamstack was fun. The main SSG was Jekyll, which was simple and open-source. It was not only free to use, but also free to host (on Github). Jamstack websites were blazing fast and scored high in Google Lighthouse. There were plenty of free CMS options to choose from. The Jamstack looked very promising! But times have changed&amp;hellip;&lt;/p>
&lt;h2 id="jekyll-is-dead">Jekyll is dead&lt;/h2>
&lt;p>Sure&amp;hellip; you can still use Jekyll. But Jekyll lost its most important developer and Github decided to freeze their Jekyll version. Without Github support there is no real reason to create new Jekyll versions. Jekyll is no longer a future-proof SSG.&lt;/p></description></item><item><title>The Stackless Way</title><link>/blog/the-stackless-way/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><guid>/blog/the-stackless-way/</guid><description>&lt;p>The Stackless Way wants to give beginners a gradual path from simple HTML into more power without encountering frameworks or build tools as a barrier. It shares my conviction that &amp;rsquo;there are no shortcuts&amp;rsquo; and &amp;lsquo;&lt;a href="https://www.usecue.com/blog/code-warriors" target="_blank" rel="noopener">you need to master your sword&lt;/a>&amp;rsquo;.&lt;/p>
&lt;h2 id="good-old-html">Good old HTML&lt;/h2>
&lt;p>The Stackless Way uses standard HTML elements. &lt;a href="https://tutorials.yax.com/articles/the-yax-way/2.html" target="_blank" rel="noopener">Daniel Kehoe&lt;/a>, who inspired me to write something about Stackless, proposes to use custom HTML elements that are enriched with javascript, but I am a purist: loading unknown code from a package manager is not plain and Stackless enough for me.&lt;/p></description></item></channel></rss>